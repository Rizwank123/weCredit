// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://example.com/terms",
        "contact": {
            "name": "Mohammad Developer",
            "url": "https://rizwank123.github.io",
            "email": "md.rizwank431@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "post": {
                "description": "Create a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ForbiddenAccessError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/SystemError"
                        }
                    }
                }
            }
        },
        "/users/init/login": {
            "post": {
                "description": "Initiates the login process, such as sending an OTP or a link for authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Initiate login",
                "operationId": "initUserLogin",
                "parameters": [
                    {
                        "description": "Login initiation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InitLoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {}
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/InvalidRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/SystemError"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticate a user using provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "operationId": "userLogin",
                "parameters": [
                    {
                        "description": "Login input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/LoginOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/SystemError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Find a user based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Find a user by ID",
                "operationId": "findUserByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/InvalidRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/UnauthorizedError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ForbiddenAccessError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/SystemError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "BaseResponse": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "CreateUserInput": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "type": "string",
                    "example": "RECEPTIONIST"
                },
                "user_name": {
                    "type": "string",
                    "example": "+919876543210"
                }
            }
        },
        "ForbiddenAccessError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "FORBIDDEN_ACCESS"
                },
                "message": {
                    "type": "string",
                    "example": "You are forbidden from accessing this resource"
                }
            }
        },
        "InitLoginInput": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "+919876543210"
                }
            }
        },
        "InvalidRequestError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid request"
                }
            }
        },
        "LoginInput": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string",
                    "example": "123456"
                },
                "username": {
                    "type": "string",
                    "example": "+919876543210"
                }
            }
        },
        "LoginOutput": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "SystemError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INTERNAL_SERVER_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "Oops! Something went wrong. Please try again later"
                }
            }
        },
        "UnauthorizedError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "UNAUTHORIZED"
                },
                "message": {
                    "type": "string",
                    "example": "You are not authorized to access this resource"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "type": "string",
                    "example": ""
                },
                "role": {
                    "type": "string",
                    "example": "RECEPTIONIST"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string",
                    "example": "+919876543210"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7700",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "WeChat API",
	Description:      "WeChat application's set of APIs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
