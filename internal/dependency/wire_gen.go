// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/weCredit/internal/database"
	"github.com/weCredit/internal/http/api"
	"github.com/weCredit/internal/http/controller"
	"github.com/weCredit/internal/pkg/config"
	"github.com/weCredit/internal/pkg/security"
	"github.com/weCredit/internal/pkg/util"
	"github.com/weCredit/internal/repository"
	"github.com/weCredit/internal/service"
)

// Injectors from wire.go:

func NewConfig(opt config.Options) (config.WeCreditConfig, error) {
	weCreditConfig, err := config.NewConfig(opt)
	if err != nil {
		return config.WeCreditConfig{}, err
	}
	return weCreditConfig, nil
}

func NewDatabaseConfig(cfg config.WeCreditConfig) (*pgxpool.Pool, error) {
	pool := database.NewDB(cfg)
	return pool, nil
}

func NewWeCredit(cfg config.WeCreditConfig, db *pgxpool.Pool) (*api.WeCreditApi, error) {
	appUtil := util.NewAppUtil()
	loginCodeRepository := repository.NewLoginCodeRepository(db)
	manager := security.NewJwtSecurityManager(cfg)
	transactioner := repository.NewTransactioner(db)
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(appUtil, cfg, loginCodeRepository, manager, transactioner, userRepository)
	userController := controller.NewUserController(userService)
	weCreditApi := api.NewWeCreditApi(cfg, userController)
	return weCreditApi, nil
}
